// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/cloudfoundry/streaming-mysql-backup-client/client"
	"github.com/cloudfoundry/streaming-mysql-backup-client/download"
)

type FakeDownloader struct {
	DownloadBackupStub        func(string, download.StreamedWriter) error
	downloadBackupMutex       sync.RWMutex
	downloadBackupArgsForCall []struct {
		arg1 string
		arg2 download.StreamedWriter
	}
	downloadBackupReturns struct {
		result1 error
	}
	downloadBackupReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDownloader) DownloadBackup(arg1 string, arg2 download.StreamedWriter) error {
	fake.downloadBackupMutex.Lock()
	ret, specificReturn := fake.downloadBackupReturnsOnCall[len(fake.downloadBackupArgsForCall)]
	fake.downloadBackupArgsForCall = append(fake.downloadBackupArgsForCall, struct {
		arg1 string
		arg2 download.StreamedWriter
	}{arg1, arg2})
	stub := fake.DownloadBackupStub
	fakeReturns := fake.downloadBackupReturns
	fake.recordInvocation("DownloadBackup", []interface{}{arg1, arg2})
	fake.downloadBackupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDownloader) DownloadBackupCallCount() int {
	fake.downloadBackupMutex.RLock()
	defer fake.downloadBackupMutex.RUnlock()
	return len(fake.downloadBackupArgsForCall)
}

func (fake *FakeDownloader) DownloadBackupCalls(stub func(string, download.StreamedWriter) error) {
	fake.downloadBackupMutex.Lock()
	defer fake.downloadBackupMutex.Unlock()
	fake.DownloadBackupStub = stub
}

func (fake *FakeDownloader) DownloadBackupArgsForCall(i int) (string, download.StreamedWriter) {
	fake.downloadBackupMutex.RLock()
	defer fake.downloadBackupMutex.RUnlock()
	argsForCall := fake.downloadBackupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDownloader) DownloadBackupReturns(result1 error) {
	fake.downloadBackupMutex.Lock()
	defer fake.downloadBackupMutex.Unlock()
	fake.DownloadBackupStub = nil
	fake.downloadBackupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDownloader) DownloadBackupReturnsOnCall(i int, result1 error) {
	fake.downloadBackupMutex.Lock()
	defer fake.downloadBackupMutex.Unlock()
	fake.DownloadBackupStub = nil
	if fake.downloadBackupReturnsOnCall == nil {
		fake.downloadBackupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadBackupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDownloader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadBackupMutex.RLock()
	defer fake.downloadBackupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDownloader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.Downloader = new(FakeDownloader)
